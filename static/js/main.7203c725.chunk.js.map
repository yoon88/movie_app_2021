{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","title","year","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","d","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6QA4CeA,MAxCf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAE9C,OACA,sBAAKC,UAAU,QAAf,UAaI,qBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAGjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAE,KAA/C,gBC2CGC,G,kNAlEbC,MAAQ,CACJC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAOMC,IAAMC,IACd,yDARE,gBAKOJ,EALP,EAIFK,KACEA,KAAOL,OAMX,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAX9B,2C,uDAcZ,WAIEQ,KAAKN,c,oBAET,WACE,MAA4BM,KAAKT,MAA1BC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,OAElB,OACA,yBAASV,UAAW,YAApB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAY,gBAAlB,0BAGJ,qBAAKA,UAAU,SAAf,SAEIU,EAAOP,KAAI,SAAAe,GAAK,OACZ,cAAE,EAAF,CAEEC,EAAGD,EAAMxB,GACTE,KAAMsB,EAAMtB,KACZD,MAAOuB,EAAMvB,MACbE,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMxB,e,GAxCT2B,IAAMC,YCSxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7203c725.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({id, title, year, summary, poster, genres}){\n    // return <h4>{title}</h4>\n    return (\n    <div className=\"movie\">\n         {/* <Link\n        to={{\n          pathname: `/movie/${id}`,\n          state: {\n            year,\n            title,\n            summary,\n            poster,\n            genres\n          }\n        }}\n      > */}\n        <img src={poster} alt={title} title={title} />\n        <div className=\"movie__data\">\n            <h3 className=\"movie__title\">{title}</h3>\n            <h5 className=\"movie__year\">{year}</h5>\n            <ul className=\"movie__genres\">\n                {genres.map((genre, index) => (\n                    <li key={index} className=\"genres__genre\">{genre}</li> \n                ))}\n            </ul>\n            <p className=\"movie__summary\">{summary.slice(0,180)}...</p>  \n        </div>  \n        {/* </Link>   */}\n    </div>\n    );\n}\n\nMovie.propTypes ={\n    title : PropTypes.string.isRequired,\n    year : PropTypes.number.isRequired,\n    summary : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired,\n}\n\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component{\n  state = {\n      isLoading: true,\n      movies: []\n    };\n    // 비동기 함수 async, await\n    getMovies = async() => {\n            // const movies = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json\");\n            // console.log(movies.data.data.movies);\n            const {\n              data: {\n                data :{movies}\n              }\n            } = await axios.get(\n              \"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"\n            );\n            // console.log(movies);\n            this.setState({movies, isLoading: false}); \n            //this.setState({movies:movies}) state : axios\n    };\n    componentDidMount(){\n      // setTimeout(()=>{\n      //   this.setState({isLoading: false});\n      // }, 6000);\n      this.getMovies();\n    }\n  render(){\n    const {isLoading, movies} = this.state;\n    // return <div>{isLoading ? \"Loading\" : \"We are ready\"}</div>;\n    return (\n    <section className =\"container\">\n      {isLoading ? ( \n        <div className=\"loader\">\n          <span className = \"loader__text_\">Loading...</span>\n        </div> \n    ) : (\n      <div className=\"movies\">\n        {\n          movies.map(movie=>(\n              < Movie\n                key={movie.id}\n                d={movie.id} \n                year={movie.year} \n                title={movie.title} \n                summary={movie.summary} \n                poster={movie.medium_cover_image} \n                genres={movie.genres}\n              />\n          ))\n        }\n      </div>\n    //    movies.map(movie => (\n    //     <Movie \n    //       key={movie.id}\n    //       id={movie.id} \n    //       year={movie.year} \n    //       title={movie.title} \n    //       summary={movie.summary} \n    //       poster={movie.medium_cover_image}\n    //     />\n    // ))\n    )}\n    </section>\n    );\n  }\n}\n\nexport default App;\n//이론적으로 우리가 할 일은 componentDidMount에서 data를 fetch하는 것\n//그리고 API로부터 data fetching이 완료되면 we are ready 대신 movie를 render하고 map을 만들고\n//movie를 render하기\n\n//render -> componetDidMount 수행\n//fetch, Axios\n//axios : fetch 위에 있는 작은 레이어, 느림\n//axios를 사용하기 위해 설치가 필요 : npm install axios\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// <App /> component : react는 component와 함께 동작\n//App.js의 function App()에 있는 HTML을 반환하는 함수\n//Javascript와 HTML 사이의 조합을 jsx라고 함, react에서 나온 매우 custom한 유일한 개념\n// ReactßDOM.render(\n//  <React.StrictMode>\n//     <App />\n//  </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App />, document.getElementById(\"root\")); //와 동일함\n// ReactDOM.render(<App/><Potato/>, document.getElementById('root')); 는 에러 발생\n// Potato가 출력되기를 원한다면 App안에 선언해야함\n//<React.stricMode> 가 있는 상태로는 2개이상의 component수행 가능 , 개발 모드에만 영향을 끼침, create-react-app으로 프로젝트를 생성하면 자동으로 추가\n//하지만 실제로는 오직 1개의 component 수행 가능\n//rendering : data --> html로 변환하여 renderer에게 전달하는 작업(모니터 출력)\n\n//!important!\n//react application은 한번에 하나의 component만 rendering할 수 있으므로 모든 것은 application(App)안에 들어가야 함\n//applictaion안에서 많은 component를 넣을 수 있고, 이러한 component안에 더 많은 component를 import 할 수 있음 \n\n\n//React 장점!!!!!\n// 재사용이 가능한 component를 만들 수 있다는 점\n// 즉, component를 계속해서 반복해서 사용할 수 있다는 것"],"sourceRoot":""}